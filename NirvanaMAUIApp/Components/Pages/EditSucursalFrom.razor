@page "/EditSucursalFrom"
@using NirvanaMAUIApp.Models
@using NirvanaMAUIApp.Services
@using NirvanaMAUIApp.StateCurrent
@inject StateService StateService
@inject NavigationManager NavigationManager
@inject ISucursalServices SucursalServices
@inject ISnackbar Snackbar
<MudText Typo="Typo.h5">@Title</MudText>
 <MudCardContent Style="max-height: 80%; overflow-y: auto;">
    <MudCard>
        <MudCardContent >
       
            @if (Loading)
            {
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            }
            else
            {
                <MudForm Model="Sucursal" @ref="form">
                    <MudTextField @bind-Value="Sucursal.nombre" Label="Nombre" For="@(() => Sucursal.nombre)" />
                    <MudTextField @bind-Value="Sucursal.direccion" Label="Direccion" For="@(() => Sucursal.direccion)" />

                  

                    <MudTextField @bind-Value="Sucursal.telefono" Label="Telefono" For="@(() => Sucursal.telefono)" />
                   
                </MudForm>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Primary" OnClick="Save">Guardar</MudButton>
            <MudButton Color="Color.Secondary" OnClick="Cancel">Cancelar</MudButton>
        </MudCardActions>
    </MudCard>
</MudCardContent>
@code {
    private SucursalModels Sucursal { get; set; }
    private bool Loading = false;
    private MudForm form;
    private string Title { get; set; } = "Sucursal";
    protected override async Task OnInitializedAsync()
    {

        if (StateService.CurrentSucursal != null)
        {
            // Utiliza el objeto almacenado para la edición

            Sucursal = StateService.CurrentSucursal;

        }
        else
        {
            // Crea un nuevo objeto AlmacenModels para un nuevo almacén

            Sucursal = new SucursalModels();

        }
    }
    private void Cancel()
    {
        // Navega de regreso a la lista de almacenes
        NavigationManager.NavigateTo("/sucursal");
    }
    private async Task Save()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Loading = true;
            bool success = Sucursal.sucursalId == 0
                ? await SucursalServices.RegistrarNuevo(Sucursal)
                : await SucursalServices.Update(Sucursal);
            Loading = false;

            if (success)
            {
                //Snackbar.Add("Almacén guardado con éxito", Severity.Success);
                // Navega de regreso a la lista de almacenes
                Snackbar.Add($"{Title} guardado con éxito", Severity.Success);
                NavigationManager.NavigateTo("/sucursal");
            }
            else
            {
                //Snackbar.Add("Error al guardar el almacén", Severity.Error);
                Snackbar.Add($"Error al {Title.ToLower()}", Severity.Error);
            }
        }
    }
}
