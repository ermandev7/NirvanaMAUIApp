@page "/EditAlmacenDialog"
@inject AlmacenStateService AlmacenStateService
@using NirvanaMAUIApp.Generic
@using NirvanaMAUIApp.Models
@using NirvanaMAUIApp.Services
@using NirvanaMAUIApp.StateCurrent
@inject NavigationManager NavigationManager
@inject IAlmacenService AlmacenService
@using NirvanaMAUIApp.Components.UIComponents
@inject ISnackbar Snackbar
 <MudText Typo="Typo.h5">@Title</MudText>
 <MudCardContent Style="max-height: 80%; overflow-y: auto;">
    <MudCard>
        <MudCardContent >
       
            @if (Loading)
            {
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            }
            else
            {
                <MudForm Model="Almacen" @ref="form">
                    <MudTextField @bind-Value="Almacen.nombre" Label="Nombre" For="@(() => Almacen.nombre)" />
                    <MudTextField @bind-Value="Almacen.descripcion" Label="Descripción" For="@(() => Almacen.descripcion)" />

                    <SucursalSelect @bind-SelectedSucursalId="Almacen.sucursalId" />

                    <MudTextField @bind-Value="Almacen.estado" Label="Estado" For="@(() => Almacen.estado)" />
                   
                </MudForm>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Primary" OnClick="Save">Guardar</MudButton>
            <MudButton Color="Color.Secondary" OnClick="Cancel">Cancelar</MudButton>
        </MudCardActions>
    </MudCard>
</MudCardContent>

@code {

    private AlmacenModels Almacen { get; set; }
    private bool Loading = false;
    private MudForm form;
    private string Title { get; set; } = "Almacen";
    protected override async Task OnInitializedAsync()
    {
        
        if (AlmacenStateService.CurrentAlmacen != null)
        {
            // Utiliza el objeto almacenado para la edición
         
            Almacen = AlmacenStateService.CurrentAlmacen;
           
        }
        else
        {
            // Crea un nuevo objeto AlmacenModels para un nuevo almacén
           
            Almacen = new AlmacenModels();
           
        }
    }

    private async Task Save()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Loading = true;
            bool success = Almacen.almacenId == 0
                ? await AlmacenService.RegistrarNuevoAlmacen(Almacen)
                : await AlmacenService.UpdateAlmacen(Almacen);
            Loading = false;

            if (success)
            {
                //Snackbar.Add("Almacén guardado con éxito", Severity.Success);
                // Navega de regreso a la lista de almacenes
                Snackbar.Add($"{Title} guardado con éxito", Severity.Success);
                NavigationManager.NavigateTo("/almacen");
            }
            else
            {
                //Snackbar.Add("Error al guardar el almacén", Severity.Error);
                Snackbar.Add($"Error al {Title.ToLower()}", Severity.Error);
            }
        }
    }
   
    
    private void Cancel()
    {
        // Navega de regreso a la lista de almacenes
        NavigationManager.NavigateTo("/almacen");
    }
}
