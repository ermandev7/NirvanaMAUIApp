@page "/sucursal"
@using NirvanaMAUIApp.Models
@using NirvanaMAUIApp.Services
@using NirvanaMAUIApp.StateCurrent
@inject ISucursalServices service
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject StateService StateService
@inject NavigationManager NavigationManager
@if (_data == null)
{
    <p><em>Cargando</em></p>
}

else
{

    @foreach (var result in _data)
    {
        <MudCard Style="overflow: hidden; margin-bottom: 16px;" @key="@result.sucursalId">
            <MudCardContent Style="width: 100%;">
                @if (currentlyEditingItemId == result.sucursalId)
                {
                    <MudCardContent Style="width: 100%;">
                        <MudTextField @bind-Value="result.nombre" Label="Nombre" />
                        <MudTextField @bind-Value="result.direccion" Label="Direccion" />
                        <MudTextField @bind-Value="result.telefono" Label="Telefono" />
                     
                    </MudCardContent>
                }
                else
                {
                    <MudCardContent Style="width: 100%;">
                        <MudText Typo="Typo.h4">Nombre: @result.nombre</MudText>
                        <MudText>Descripción: @result.direccion</MudText>
                        <MudText>Sucursal: @result.telefono</MudText>
                     
                    </MudCardContent>
                }
            </MudCardContent>
            <MudCardActions Style="display: flex; width: 100%;">
                <MudButton Color="Color.Primary" OnClick="() => OpenEditDialog(result)">Editar</MudButton>
                <MudButton Color="Color.Secondary" Style="width: 50%;" OnClick="() => Delete(result.sucursalId)">Eliminar</MudButton>
            </MudCardActions>
        </MudCard>
    }

    <MudFab OnClick="() => OpenCreateDialog()" Class="boton-flotante" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" />

}
<style>
    .boton-flotante {
        position: fixed; /* Fija el elemento en la misma posición de la pantalla */
        bottom: 16px; /* Distancia desde la parte inferior de la pantalla */
        right: 16px; /* Distancia desde la parte derecha de la pantalla */
        z-index: 1000; /* Asegura que el botón esté sobre otros elementos */
    }
</style>
@code {
    private List<SucursalModels> _data;
    private bool isEditing = false;
    private int? currentlyEditingItemId = null;
    protected override async Task OnInitializedAsync()
    {
        _data = await service.All();
        if (_data.Count() <= 0)
            Snackbar.Add("Sin datos para mostrar", Severity.Warning);
    }
    private async Task OpenCreateDialog()
    {
        // Si no se proporciona un objeto AlmacenModels, crea uno nuevo
        SucursalModels sucursal = new SucursalModels();

        StateService.CurrentSucursal = sucursal;

        // Navega a la página del formulario de edición
        NavigationManager.NavigateTo("/EditSucursalFrom");
    }
    private async Task OpenEditDialog(SucursalModels sucursal)
    {
        StateService.CurrentSucursal = sucursal;

        // Navega a la página del formulario de edición
        NavigationManager.NavigateTo("/EditSucursalFrom");
    }
    private async Task Delete(int itemId)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirmar eliminación",
            "¿Estás seguro de que deseas eliminar?",
            yesText: "Eliminar",
            cancelText: "Cancelar"
        );

        if (result == true)
        {
            // El usuario confirmó la eliminación
            var success = await service.DeleteSucursal(itemId);
            if (success)
            {
                Snackbar.Add("Almacén eliminado con éxito", Severity.Success);
                LoadData(); // Recarga los datos para reflejar la eliminación
            }
            else
            {
                Snackbar.Add("Error al eliminar el almacén", Severity.Error);
            }
        }
        else
        {
            // El usuario canceló la eliminación
            Snackbar.Add("Eliminación cancelada", Severity.Info);
        }
    }
    private async void LoadData()
    {
        _data = await service.All();

    }
}
